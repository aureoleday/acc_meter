object reg_op{
  def b2l(data:Int):List[Int]={
    List(data&0x00ff,(data>>>8)&0x00ff,(data>>>16)&0x00ff,(data>>>24)&0x00ff)
  }

  def l2b(data:List[Int]):Int={
    data.zipWithIndex.map(x=>x._1<<(8*x._2)).reduce(_|_)
  }

  def write_creg(addr:Int,data:Int):List[Int]={
    val SYNC = List(0x1b,0xdf,0x20,0x05)
    val frame = ((SYNC :+ addr)::: b2l(data))
    val calc =  frame.takeRight(5).reduce(_^_)
    (frame:+calc)
  }

  def read_creg(addr:Int,cnt:Int):List[Int]={
    val SYNC = List(0x1b,0xdf,0x10,0x02)
    val frame = (SYNC :+ addr :+ cnt)
    val calc =  frame.takeRight(2).reduce(_^_)
    (frame:+calc)
  }

  def read_sreg(addr:Int,cnt:Int):List[Int]={
    read_creg(addr|0x80,cnt)
  }

  def parse_frame(rxd_buf:List[Int]):Unit={
    val RSYNC = List(0x9b,0xdf)
    val sync_ind = rxd_buf.sliding(2).indexOf(RSYNC)
    if (sync_ind < 0 )
      return 

    val f_len = ((rxd_buf(sync_ind+2)&0x0f)<<8) + rxd_buf(sync_ind+3) 
    //val f_len = rxd_buf(sync_ind+3)
	//println("flen_t:"+f_len_t+"flen:"+f_len)
    val frame = rxd_buf.slice(sync_ind,sync_ind+5+f_len)
    val chk = frame.takeRight(f_len+1).reduce(_^_)
    val res = if (chk == 0){
      (frame(2)&0xf0) match{
        case 0x10 => println("read resp:\nbase_addr:"+frame(2)+"\nreg_cnt:"+(f_len-1)/4+"\ndata:"+frame.drop(5).dropRight(1).grouped(4).toList.map(x=>l2b(x))+"\n")
        case 0x20 => println(s"write resp: ${if(0==frame(5)) "Ack" else "Nak"} \n")
        case 0x80 => println("data resp:\ndata_cnt:"+(f_len-1)/4+"\nidx:"+frame(5)+"\ndata:"+frame.drop(5).dropRight(1).grouped(4).toList.map(x=>l2b(x)).map(_*0.000000009933)+"\n")
        case _ => println("unrecongnizible frame"+"\n") 
      }
      rxd_buf.drop(sync_ind+5+f_len) 
    }
    else{
      println("checksum fail\n")
      rxd_buf.drop(sync_ind+2) 
    }
    parse_frame(res)
  }

  def main(args: Array[String]):Unit={

    val rd_resp = List(0x9b,0xdf,0x10,0x05,0x04,0x50,0xc3,0x00,0x00,0x97)
    val wr_resp = List(0x9b,0xdf,0x20,0x02,0x01,0x00,0x01)
    val rdn_resp = List(0x9b,0xdf,0x10,0x21,0x80,0x40,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x02,0x00,0x03,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x24,0x01,0x00,0x00,0xa4)
	val dat_prd = List(
					0x9b,0xdf,0x81,0x75,0x61,0x60,0xdb,0x00,0x00,0x94,0x25,0x00,0x00,0x82,0x74,0xff,
					0xff,0x50,0xca,0xfe,0xff,0xd2,0x34,0xfe,0xff,0xd8,0xca,0xfd,0xff,0x70,0x88,0xfd,
					0xff,0x7c,0x72,0xfd,0xff,0x32,0x8f,0xfd,0xff,0x18,0xd1,0xfd,0xff,0xf4,0x26,0xfe,
					0xff,0x22,0x94,0xfe,0xff,0x3c,0x10,0xff,0xff,0xb6,0x90,0xff,0xff,0x1c,0x0c,0x00,
					0x00,0xf6,0x72,0x00,0x00,0x44,0xca,0x00,0x00,0x18,0x0a,0x01,0x00,0x78,0x45,0x01,
					0x00,0x24,0x80,0x01,0x00,0x8e,0xa2,0x01,0x00,0x48,0xb1,0x01,0x00,0x32,0xae,0x01,
					0x00,0xb0,0x8f,0x01,0x00,0x26,0x60,0x01,0x00,0x2c,0x23,0x01,0x00,0xf4,0xce,0x00,
					0x00,0x06,0x7c,0x00,0x00,0x8e,0x35,0x00,0x00,0xe2,0xff,0xff,0xff,0xbc,0xdf,0xff,
					0xff,0xb8,0xd9,0xff,0xff,0x7c,0xd9,0xff,0xff,0x9a,0xde,0xff,0xff,0xb4,0xdd,0xff,
					0xff,0x94,0xd0,0xff,0xff,0x62,0x94,0xff,0xff,0x74,0x32,0xff,0xff,0x46,0xb1,0xfe,
					0xff,0xea,0x0d,0xfe,0xff,0x68,0x63,0xfd,0xff,0x8a,0xba,0xfc,0xff,0x86,0x1e,0xfc,
					0xff,0x9c,0x9f,0xfb,0xff,0x54,0x33,0xfb,0xff,0x88,0xe1,0xfa,0xff,0x06,0xb9,0xfa,
					0xff,0x98,0xbd,0xfa,0xff,0xaa,0xe7,0xfa,0xff,0x6a,0x31,0xfb,0xff,0x06,0x81,0xfb,
					0xff,0xba,0xc7,0xfb,0xff,0x1a,0x08,0xfc,0xff,0xf6,0x3f,0xfc,0xff,0x0e,0x78,0xfc,
					0xff,0xac,0xb1,0xfc,0xff,0x52,0xfc,0xfc,0xff,0x86,0x5e,0xfd,0xff,0x4c,0xde,0xfd,
					0xff,0xee,0x81,0xfe,0xff,0x88,0x3c,0xff,0xff,0x4c,0x04,0x00,0x00,0x24,0xc2,0x00,
					0x00,0x52,0x52,0x01,0x00,0x52,0xa2,0x01,0x00,0x66,0xc5,0x01,0x00,0xe0,0xd2,0x01,
					0x00,0xae,0xc8,0x01,0x00,0x12,0xbf,0x01,0x00,0xa0,0xb8,0x01,0x00,0x72,0xb4,0x01,
					0x00,0x94,0xb5,0x01,0x00,0xe2,0xb7,0x01,0x00,0x1a,0xad,0x01,0x00,0x60,0x8a,0x01,
					0x00,0xba,0x49,0x01,0x00,0x6e,0xe6,0x00,0x00,0x00,0x69,0x00,0x00,0x36,0xf2,0xff,
					0xff,0xdc,0x97,0xff,0xff,0x0e,0x57,0xff,0xff,0x5e,0x43,0xff,0xff,0xe2,0x55,0xff,
					0xff,0xaa,0x92,0xff,0xff,0xee,0xdf,0xff,0xff,0x38,0x27,0x00,0x00,0x9c,0x68,0x00,
					0x00,0xf0,0x96,0x00,0x00,0x12,0xc5,0x00,0x00,0x32,0x09,0x01,0x00,0xf6,0x44,0x01,
					0x00,0x42,0x17,0x01,0x00,0x40,0x56,0x00,0x00,0x6d)

    //向地址为19的配置寄存器写40
    println("\n>>>地址为19的配置寄存器写40<<<")
    println(write_creg(19,40).map(_.toHexString))
    //从地址为1的配置寄存器读取1个数据
    println("\n>>>从地址为1的配置寄存器读取1个数据<<<")
    println(read_creg(1,1).map(_.toHexString))
    //从地址为0的配置寄存器开始,连续读取8个数据(读取0-7寄存器内容)
    println("\n>>>从地址为0的配置寄存器开始,连续读取8个数据(读取0-7寄存器内容)<<<")
    println(read_creg(0,8).map(_.toHexString))
    //从地址为3的状态寄存器开始,读取8个数据
    println("\n>>>从地址为3的状态寄存器开始,读取8个数据<<<")
    println(read_sreg(3,8).map(_.toHexString))
    println(read_sreg(11,1).map(_.toHexString))
    //解析读取返回报文
    println("\n>>>rd resp test<<<")
    parse_frame(rd_resp)
    //解析写入返回报文
    println("\n>>>wr resp test<<<")
    parse_frame(wr_resp)
    //解析读写返回报文
    println("\n>>>rw resp test<<<")
    parse_frame(wr_resp:::rd_resp)
    //解析读取多个寄存器返回报文
    println("\n>>>rd multiple regs resp test<<<")
    parse_frame(rdn_resp)
    //解析周期报文
    println("\n>>>period data frame parse test<<<")
    parse_frame(dat_prd)
  }
}
